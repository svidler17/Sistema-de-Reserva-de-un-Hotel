
# CLASES PRINCIPALES


class Cliente:
    def __init__(self, id_cliente, nombre):
        self.id_cliente = id_cliente
        self.nombre = nombre
        self.historial = []

    def agregar_evento_historial(self, evento):
        self.historial.append(evento)

    def mostrar_historial(self):
        if not self.historial:
            print(f"No hay historial para {self.nombre}.")
        else:
            print(f"\n--- Historial de {self.nombre} ---")
            for i, evento in enumerate(self.historial, 1):
                print(f"{i}. {evento}")

    def __str__(self):
        return f"{self.nombre} (CI: {self.id_cliente})"


class Habitacion:
    def __init__(self, numero, tipo, tarifa):
        self.numero = numero
        self.tipo = tipo
        self.tarifa = tarifa
        self.estado = "Disponible"

    def cambiar_estado(self, nuevo_estado):
        if nuevo_estado in ["Disponible", "Ocupada"]:
            self.estado = nuevo_estado

    def __str__(self):
        return f"Habitación {self.numero} ({self.tipo}) - {self.estado} | Tarifa: ${self.tarifa}"


class Hotel:
    def __init__(self, nombre):
        self.nombre = nombre
        self.habitaciones = []

    def agregar_habitacion(self, habitacion):
        self.habitaciones.append(habitacion)

    def mostrar_habitaciones(self):
        if not self.habitaciones:
            print("No hay habitaciones registradas.")
            return
        print(f"\n--- Habitaciones disponibles en {self.nombre} ---")
        tipos = ["Individual", "Doble", "Suite"]
        for tipo in tipos:
            print(f"\n>> Habitaciones {tipo}s:")
            for h in self.habitaciones:
                if h.tipo == tipo:
                    print(h)
            print("\n--------------------------------")


class Reserva:
    def __init__(self, id_reserva, cliente, habitacion, dias_estadia):
        self.id_reserva = id_reserva
        self.cliente = cliente
        self.habitacion = habitacion
        self.dias_estadia = dias_estadia
        self.estado = "Activa"
        self.total = habitacion.tarifa * dias_estadia
        self.pagado = 0.0

    def cancelar(self):
        self.estado = "Cancelada"
        self.habitacion.cambiar_estado("Disponible")

    def registrar_pago(self, monto):
        self.pagado += monto
        return self.pagado

    def saldo_pendiente(self):
        return self.total - self.pagado

    def __str__(self):
        #  Quitar decimales si el número es entero
        total = int(self.total) if self.total.is_integer() else self.total
        pagado = int(self.pagado) if self.pagado.is_integer() else self.pagado
        return (f"Reserva {self.id_reserva}: {self.cliente.nombre} - "
                f"Habitación {self.habitacion.numero} ({self.habitacion.tipo}) - "
                f"{self.dias_estadia} días - Estado: {self.estado} - Total: ${total} - Pagado: ${pagado}")


class Pago:
    def __init__(self, reserva, monto, metodo_pago):
        self.reserva = reserva
        self.monto = monto
        self.metodo_pago = metodo_pago
        self.estado = "Pendiente"

    def procesar_pago(self):
        saldo = self.reserva.saldo_pendiente()
        if self.monto == saldo:
            self.reserva.registrar_pago(self.monto)
            self.estado = "Pagado"
            print(" Pago completado correctamente.")
        elif self.monto > saldo:
            cambio = self.monto - saldo
            self.reserva.registrar_pago(saldo)
            self.estado = "Pagado"
            print(f" Pago completado. Se devolverán ${int(cambio) if cambio.is_integer() else cambio} de cambio.")
        else:
            self.reserva.registrar_pago(self.monto)
            restante = self.reserva.saldo_pendiente()
            print(f" Pago incompleto. Faltan ${int(restante) if restante.is_integer() else restante} para completar el pago.")

        return self.estado



# VARIABLES GLOBALES

clientes_global = []


# MENÚ CLIENTE

def menu_cliente(cliente):
    print(f"\nBienvenido, {cliente.nombre} (CI: {cliente.id_cliente})")
    hotel = Hotel("Hotel La Velaria")
    hotel.agregar_habitacion(Habitacion(101, "Individual", 100.00))
    hotel.agregar_habitacion(Habitacion(102, "Individual", 100.00))
    hotel.agregar_habitacion(Habitacion(201, "Doble", 150.00))
    hotel.agregar_habitacion(Habitacion(202, "Doble", 150.00))
    hotel.agregar_habitacion(Habitacion(301, "Suite", 300.00))
    hotel.agregar_habitacion(Habitacion(302, "Suite", 300.00))

    reservas = []

    while True:
        print("\n--- MENÚ CLIENTE ---")
        print("1. Ver habitaciones disponibles")
        print("2. Crear reserva")
        print("3. Cancelar reserva")
        print("4. Procesar pago")
        print("5. Ver mi historial")
        print("6. Salir")

        opcion = input("Seleccione una opción: ")

        if opcion == "1":
            hotel.mostrar_habitaciones()

        elif opcion == "2":
            id_reserva = input("ID de la reserva: ")
            hotel.mostrar_habitaciones()
            num = int(input("Número de habitación: "))
            habitacion = next((h for h in hotel.habitaciones if h.numero == num and h.estado == "Disponible"), None)
            if not habitacion:
                print("Habitación no disponible.")
                continue
            dias = int(input("Número de días de estadía: "))
            reserva = Reserva(id_reserva, cliente, habitacion, dias)
            reservas.append(reserva)
            habitacion.cambiar_estado("Ocupada")

            total = int(reserva.total) if reserva.total.is_integer() else reserva.total
            cliente.agregar_evento_historial(f"Reserva {id_reserva} creada para habitación {num} por {dias} días. Total: ${total}")
            print(f" Reserva creada exitosamente. Total a pagar: ${total}")

        elif opcion == "3":
            id_reserva = input("ID de la reserva a cancelar: ")
            reserva = next((r for r in reservas if r.id_reserva == id_reserva), None)
            if not reserva:
                print("Reserva no encontrada.")
            else:
                reserva.cancelar()
                cliente.agregar_evento_historial(f"Reserva {id_reserva} cancelada.")
                print("Reserva cancelada correctamente.")

        elif opcion == "4":
            activas = [r for r in reservas if r.estado == "Activa" and r.saldo_pendiente() > 0]
            if not activas:
                print(" No tiene reservas activas o pendientes de pago.")
                continue

            print("\n--- Reservas pendientes ---")
            for r in activas:
                print(r)

            id_reserva = input("Ingrese el ID de la reserva que desea pagar: ")
            reserva = next((r for r in activas if r.id_reserva == id_reserva), None)

            if not reserva:
                print("Reserva no encontrada o ya está pagada.")
                continue

            total = int(reserva.total) if reserva.total.is_integer() else reserva.total
            pagado = int(reserva.pagado) if reserva.pagado.is_integer() else reserva.pagado
            pendiente = int(reserva.saldo_pendiente()) if reserva.saldo_pendiente().is_integer() else reserva.saldo_pendiente()

            print(f"\nTotal a pagar: ${total} | Pagado: ${pagado} | Pendiente: ${pendiente}")
            monto = float(input("Ingrese el monto que desea pagar: "))
            metodo = input("Método de pago (Efectivo/Tarjeta): ")
            pago = Pago(reserva, monto, metodo)
            resultado = pago.procesar_pago()

            cliente.agregar_evento_historial(f"Pago de ${monto} realizado para reserva {reserva.id_reserva} ({resultado}).")

        elif opcion == "5":
            cliente.mostrar_historial()

        elif opcion == "6":
            print("Gracias por usar el sistema. Hasta luego.")
            break

        else:
            print("Opción inválida.")


# ==========================================
# LOGIN
# ==========================================
def login():
    print("=========================================")
    print(" Bienvenido al Sistema Hotelero La Velaria")
    print("=========================================")

    nombre = input("Ingrese su nombre: ")
    cedula = input("Ingrese su número de cédula: ")
    clave = input("Ingrese su contraseña (deje en blanco si es cliente): ")

    if clave == "1234":
        print(f"\n Acceso concedido, {nombre}. Rol: Recepcionista | CI: {cedula}")
        return

    cliente_existente = next((c for c in clientes_global if c.id_cliente == cedula), None)
    if cliente_existente:
        print(f"\n Bienvenido nuevamente, {cliente_existente.nombre}.")
        cliente_existente.agregar_evento_historial("Inicio de sesión en el sistema.")
        menu_cliente(cliente_existente)
    else:
        print("\n Cliente nuevo detectado.")
        nuevo = Cliente(cedula, nombre)
        nuevo.agregar_evento_historial("Cliente registrado en el sistema.")
        clientes_global.append(nuevo)
        print(f"Cliente {nombre} registrado correctamente.")
        menu_cliente(nuevo)


# ==========================================
# EJECUCIÓN PRINCIPAL
# ==========================================
if __name__ == "__main__":
    login()

