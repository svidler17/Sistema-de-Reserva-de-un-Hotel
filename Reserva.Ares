# =========================================================
#  Clase Cliente
# =========================================================
class Cliente:
    def __init__(self, id_cliente, nombre):
        if not str(id_cliente).isdigit():
            raise ValueError("El ID del cliente debe contener solo números.")
        
        if not nombre.strip():
            raise ValueError("El nombre no puede estar vacío.")
        
        self.id_cliente = int(id_cliente)
        self.nombre = nombre.strip()

    def __str__(self):
        return f"{self.nombre} (ID: {self.id_cliente})"


# Clase Habitación
class Habitacion:
    TIPOS_VALIDOS = ["Individual", "Doble", "Suite", "Familiar"]  # tipos permitidos

    def __init__(self, numero, tipo):
        self.numero = numero
        if self.validar_tipo(tipo):
            self.tipo = tipo.capitalize()
        else:
            self.tipo = None  # si el tipo no es válido, se deja sin asignar
        self.estado = "Disponible"
        self.fecha_ingreso = None
        self.fecha_salida = None
        self.metodo_pago = None
        self.total = 0

    def validar_tipo(self, tipo):
       
        if not isinstance(tipo, str):   # Valida que el tipo de habitación sea texto y esté en la lista permitida
            print("El tipo de habitación debe ser texto (por ejemplo: 'Doble', 'Suite').")
            return False
        tipo = tipo.capitalize()
        if tipo not in self.TIPOS_VALIDOS:
            print(f"Tipo de habitación inválido. Debe ser uno de: {', '.join(self.TIPOS_VALIDOS)}.") # une los texto separados por coma
            return False
        return True

    def calcular_total(self, precio_por_dia):
        # Calcula el total con base en los días de estancia
        if self.fecha_ingreso and self.fecha_salida:
            dias = (self.fecha_salida - self.fecha_ingreso).days
            if dias <= 0:
                dias = 1
            self.total = dias * precio_por_dia
            return self.total
        return 0

    def cambiar_estado(self, nuevo_estado):
        # Cambia el estado de la habitación
        if nuevo_estado not in ["Disponible", "Ocupada", "Mantenimiento"]:
            print("Estado no válido.")
        else:
            self.estado = nuevo_estado
            print(f"Estado actualizado a: {self.estado}")

    def __str__(self):
        if self.tipo is None:
            return f"Habitación {self.numero} (Tipo no válido)"
        if self.estado == "Ocupada" and self.fecha_ingreso and self.fecha_salida:
            return (f"Habitación {self.numero} ({self.tipo}) - {self.estado} | "
                    f"Desde: {self.fecha_ingreso.date()} Hasta: {self.fecha_salida.date()} | "
                    f"Método de pago: {self.metodo_pago} | Total: ${self.total}")
        else:
            return f"Habitación {self.numero} ({self.tipo}) - {self.estado}"


# Clase Hotel (solo para habitaciones)
class Hotel:
    def __init__(self, nombre):
        self.nombre = nombre
        self.habitaciones = []

    def agregar_habitacion(self, habitacion):
        # Evita duplicar números de habitación
        if habitacion.tipo is None:
            print("No se puede registrar la habitación porque el tipo es inválido.")
            return
        if any(h.numero == habitacion.numero for h in self.habitaciones):
            print("Ya existe una habitación con ese número.")
            return
        self.habitaciones.append(habitacion)
        print(f"Habitación registrada: {habitacion}")

    def mostrar_habitaciones(self):
        # Muestra todas las habitaciones registradas
        if not self.habitaciones:
            print("\nNo hay habitaciones registradas.")
            return
        print("\n===Habitaciones===")
        for hab in self.habitaciones:
            print(hab)
# =========================================================
#  Clase Reserva
# =========================================================
class Reserva:
    def __init__(self, id_reserva, cliente, habitacion, dias_estadia):
        self.id_reserva = id_reserva
        self.cliente = cliente
        self.habitacion = habitacion
        self.dias_estadia = dias_estadia
        self.estado = "Activa"

    def modificar_reserva(self, nuevos_dias):
        if self.estado != "Activa":
            print("No se puede modificar una reserva que no está activa.")
            return
        self.dias_estadia = nuevos_dias
        print("Reserva modificada correctamente.")

    def cancelar_reserva(self):
        if self.estado == "Cancelada":
            print("La reserva ya estaba cancelada.")
        else:
            self.estado = "Cancelada"
            self.habitacion.cambiar_estado("Disponible")
            print("Reserva cancelada correctamente.")

    def __str__(self):
        return (f"Reserva {self.id_reserva}: {self.cliente.nombre} - "
                f"Habitación {self.habitacion.numero} ({self.dias_estadia} días) - Estado: {self.estado}")


# =========================================================
#  Clase Pago
# =========================================================
class Pago:
    def __init__(self, cliente, monto, metodo_pago):
        self.cliente = cliente
        self.monto = monto
        self.metodo_pago = metodo_pago
        self.estado = "Pendiente"

    def procesar_pago(self):
        if self.estado == "Pagado":
            print("El pago ya fue realizado.")
        else:
            self.estado = "Pagado"
            print(f"Pago procesado correctamente. Monto: ${self.monto} - Método: {self.metodo_pago}")

    def mostrar_informacion(self):
        print(f"Cliente: {self.cliente.nombre}")
        print(f"Monto: ${self.monto}")
        print(f"Método de pago: {self.metodo_pago}")
        print(f"Estado del pago: {self.estado}")
